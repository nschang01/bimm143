---
title: "Class 7: Machine Learning"
author: Nicole Chang
format: gfm
date: 2023-04-26
editor_options:
  chunk_output_type: inline
---

# Example of K-means clustering

First step is o make up some data with a known structure, so we know what the answer should be.

```{r}
tmp <- c( rnorm(30, mean = -3), rnorm(30, mean = 3) )
x <- cbind(x = tmp, y = rev(tmp))
plot(x)
```

Now we have some structured data in `x`. Let's see if k-means is able to identify the two groups.

```{r}
k <- kmeans(x, centers = 2, nstart = 20)
k
```

Let's explore `k`:

```{r}
k$size
```

```{r}
k$centers
```

```{r}
plot(x, col = k$cluster)
```

Now we can add the clusters centers:

```{r}
plot(x, col = k$cluster)
points(k$centers, col= "blue", pch = 15)
```

An example when we select the wrong number of cluster for k-means.

```{r}
k_3 <- kmeans(x, centers = 3, nstart = 20)
plot(x, col = k_3$cluster)
```

# Example of Hierarchical Clustering

Let's use the same data as before, which we stored in 'x'. We will use the `'hclust()'` function.

```{r}
clustering <- hclust( dist(x) )
clustering
```

```{r}
plot(clustering)
```

Let's add a horizontal line

```{r}
plot(clustering)
abline(h=10, col="pink")
```

To get our results (i.e., memebership vector) we need to "cut" the tree. The function for doing that is `cutree()`.

```{r}
subgroups <- cutree(clustering, h = 10)
subgroups
```

Plotting this...

```{r}
plot(x, col = subgroups)
```

You can also "cut" your tree with the number of clusters you want:

```{r}
cutree(clustering, k = 2)
```

# Principal Component Analysis (PCA)

## PCA of the UK food

First was to read the data.

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names = 1)
head(x)
```

Now we can generate some basic visualizations

```{r}
barplot( as.matrix(x), col = rainbow( nrow(x) ) )
```

Let's refine our barplot:

```{r}
barplot( as.matrix(x), col = rainbow( nrow(x) ), beside = T )
```

Other visualizations that can be useful...

```{r}
pairs(x, col = rainbow( nrow(x) ), pch = 16)
```

Let's apply PCA (principal components analysis). For that, we need to use the command `prcomp()`. This function expects the transpose of our data.

```{r}
# transpose_matrix <- t(x)
# pca <- prcomp( transpose_matrix )
pca <- prcomp( t(x) )
summary(pca)
```

Let's plot the PCA results

```{r}
plot(pca)
```

We need to access the results of the PCA analysis\

```{r}
attributes(pca)
```

We can explore the pca\$x dataframe:

```{r}
pca$x
```

Plotting:

```{r}
plot( x=pca$x[,1], y=pca$x[,2] )
```

```{r}
plot( x=pca$x[,1], y=pca$x[,2] )
colors_countries <- c('orange', 'pink', 'blue', 'green')
text( x=pca$x[,1], y=pca$x[,2], colnames(x), col = colors_countries)
```

```{r}
pca$scale
```

## PCA of a RNA-Seq dataset

FIrst step as always is loading the data:

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
```

**Q10**: How many genes and samples are in this data set?

```{r}
dim(rna.data)
```

I have 100 genes, and 10 samples.

Let's apply PCA:

```{r}
pca_rna = prcomp( t(rna.data) )
summary(pca_rna)
```

Let's plot the principal components 1 and 2.

```{r}
plot( pca_rna$x[,1], pca_rna$x[,2],
      xlab = 'PC1', ylab = 'PC2')
```

```{r}
cols_samples <- c( rep('blue', 5), rep('red', 5) )
cols_samples

plot( pca_rna$x[,1], pca_rna$x[,2],
      xlab = 'PC1', ylab = 'PC2', 
      col = cols_samples)
```

```{r}
barplot(pca_rna$rotation[,1])
```

```{r}
sort(pca_rna$rotation[,1])
```
