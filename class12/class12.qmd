---
title: "Class 12: Differential Expression Analysis"
author: "Nicole Chang"
format: pdf
editor_options: 
  chunk_output_type: inline
---

# 2. Import countData and colData

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names= 1)
metadata <- read.csv("airway_metadata.csv")
View(counts)
View(metadata)
```

> **Q1.** How many genes are in this dataset?

In this dataset there are `r nrow(counts)` genes

> **Q2.** How many control cell lines do we have?

```{r, include=FALSE}
control_cell_lines <- table(metadata$dex)['control']
```

We have `r control_cell_lines` control cell lines.

# 3. Toy differential gene expression

> Q3. How would you make the above code in either approach more robust?

```{r}
metadata[,"dex"] == "control"
```

```{r}
metadata[metadata[,"dex"]=="control",]
```

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control$id
```

```{r}
control.counts <- counts[, control$id]
control.means <- rowMeans(control.counts)
```

> **Q4.** Follow the same procedure for the `treated` samples (i.e.Â calculate the mean per gene across drug treated samples and assign to a labeled vector called `treated.mean`)

```{r}
metadata[,"dex"] == "treated"
```

```{r}
metadata[metadata[,"dex"]=="treated",]
```

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated$id
```

```{r}
treated.counts <- counts[, treated$id]
treated.means <- rowMeans(treated.counts)
```

```{r}
meancounts <- data.frame(control.means, treated.means)
```

```{r}
colSums(meancounts)
```

> **Q5 (a).** Create a scatter plot showing the mean of the treated samples against the mean of the control samples.

```{r}
plot(meancounts[,1], meancounts[,2], xlab = "Control", ylab = "Treated")
```

> Q5 (b). You could also use the **ggplot2** package to make this figure producing the plot below. What **geom\_?()** function would you use for this plot?

point

```{r}
library(ggplot2)
ggplot(data = meancounts) +
  aes(x =control.means, y =treated.means) +
  geom_point()
```

> Q6. Try plotting both axes on a log scale. What is the argument to **plot()** that allows you to do this?

log

```{r}
plot(meancounts[,1], meancounts[,2],log='xy')
```

```{r}
log2(40/20)
```

To calculate the log2 of the fold change between treated and control...

```{r}
meancounts$log2fc <- log2(meancounts$treated.means/ 
                          meancounts$control.means)
```

To remove zero values

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

```{r}
zero.vals <- which(meancounts[,1:2] == 0, arr.ind = TRUE)
to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
```

> Q7. What is the purpose of the `arr.ind` argument in the **which()** function call above? Why would we then take the first column of the output and need to call the **unique()** function?

The purpose is to tell where in the columns and rows where the meancounts have zero counts. The unique() function gets rid of the repetition so that we don't count rows twice.

Overexpressed and underexpressed genes

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

> Q8. Using the `up.ind` vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

```{r}
table(up.ind)
```

There are 250 up regulated genes at the greater than 2 fc level.

> Q9. Using the `down.ind` vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
table(down.ind)
```

There are 367 down regulated genes at the greater than 2 fc level.

> Q10. Do you trust these results? Why or why not?

We cannot trust these results because we haven't done a proper statistical analysis on whether these values are significant.

# 4. DESeq2 analysis

First step, loading the library

```{r}
library(DESeq2)
```

```{r}
citation('DESeq2')
```

Let's generate the specific object that DESeq2 needs:

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                              colData = metadata,
                              design = ~dex)
dds
```

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
res
```

```{r}
summary(res, alpha = 0.05)
```

# 6. Data Visualization

```{r}
plot(res$log2FoldChange, -log(res$padj),
     xlab="Log2(FoldChange)",
     ylab="-Log(P-value)")
```

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

# Add some cut-off lines
abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)
```

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```
