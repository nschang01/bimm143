---
title: "Class 17: Mini Project"
author: "Nicole Chang"
date: 2023-05-26
format: gfm
---

# Getting Started

Download csv file and import vaccination data

```{r}
vax <- read.csv(file = "covid19vaccinesbyzipcode_test.csv")
head(vax)
```

> Q1. What column details the total number of people fully vaccinated?

persons_fully_vaccinated

> Q2. What column details the Zip code tabulation area?

zip_code_tabulation_area

> Q3. What is the earliest date in this dataset?

2021-01-05

> Q4. What is the latest date in this dataset?

2023-05-23

Getting a quick overview of the dataset using the `skim()` function:

```{r}
skimr::skim_without_charts(vax)
```

> **Q5.** How many numeric columns are in this dataset?

14

> **Q6.** Note that there are \"missing values\" in the dataset. How many `NA` values there in the `persons_fully_vaccinated` column?

```{r}
sum( is.na(vax$persons_fully_vaccinated) )
```

17711

> **Q7.** What percent of `persons_fully_vaccinated` values are missing (to 2 significant figures)?

```{r}
(17711/ nrow(vax) ) * 100
```

8.03%

> Q8. \[Optional\]: Why might this data be missing?

People can get vaccinated but then pass away.

# Working with dates

We will be using the lubridate package

```{r}
# BiocManager::install("lubridate")
library(lubridate)
```

What is today\'s date:

```{r}
today()
```

How many days have passed since data was first recorded:

```{r}
# This will give an Error!
# today() - vax$as_of_date[1]
```

However if we convert our date data into a lubridate format things like this will be much easier as well as plotting time series data later on.

```{r}
# Specify that we are using the year-month-day format
vax$as_of_date <- ymd(vax$as_of_date)
```

Now we can do the math with dates:

```{r}
today() - vax$as_of_date[1]
```

Using the last and the first date value we can now determine how many days the dataset span?

```{r}
vax$as_of_date[nrow(vax)] - vax$as_of_date[1]
```

> **Q9.** How many days have passed since the last update of the dataset?

```{r}
today() - ymd(vax$as_of_date[nrow(vax)])
```

8

> **Q10.** How many unique dates are in the dataset (i.e. how many different dates are detailed)?

```{r}
length(unique(vax$as_of_date))
```

# Working with ZIP codes

Let\'s install and then load up this package and to find the centroid of the La Jolla 92037 (i.e. UC San Diego) ZIP code area.

```{r}
library(zipcodeR)
```

```{r}
geocode_zip('92037')
```

Calculate the distance between the centroids of any two ZIP codes in miles, e.g.

```{r}
zip_distance('92037','92109')
```

More usefully, we can pull census data about ZIP code areas (including median household income etc.).

```{r}
reverse_zipcode(c('92037', "92109") )
```

We can use this `reverse_zipcode()` to pull census data later on for any or all ZIP code areas we might be interested in.

```{r}
# Pull data for all ZIP codes in the dataset
zipdata <- reverse_zipcode( vax$zip_code_tabulation_area )
```

# Focus on the San Diego area

Let\'s now focus in on the San Diego County area by restricting ourselves first to `vax$county == "San Diego"` entries.

```{r}
# Subset to San Diego county only areas
sd <- vax[ vax$county == 'San Diego' , ]
```

Using dplyr

```{r}
library(dplyr)

sd <- filter(vax, county == "San Diego")

nrow(sd)
```

Using **dplyr** is often more convenient when we are subsetting across multiple criteria - for example all San Diego county areas with a population of over 10,000.

```{r}
sd.10 <- filter(vax, county == "San Diego" &
                age5_plus_population > 10000)
```

> **Q11.** How many distinct zip codes are listed for San Diego County?

```{r}
length(unique(sd$zip_code_tabulation_area))
```

> **Q12.** What San Diego County Zip code area has the largest population in this dataset?

```{r}
the_largest_population = sd[sd$age5_plus_population == max (sd$age5_plus_population), ]
unique(the_largest_population$zip_code_tabulation_area)
```

92154

> **Q13.** What is the overall average (with 2 decimal numbers) \"Percent of Population Fully Vaccinated\" value for all San Diego \"County\" as of \"2023-05-23\"?

```{r}
sd_may23 <- filter(sd, as_of_date == '2023-05-23')
mean(sd_may23$percent_of_population_fully_vaccinated, na.rm = TRUE)
```

74%

> **Q14.** Using either ggplot or base R graphics make a summary figure that shows the distribution of Percent of Population Fully Vaccinated values as of \"2023-05-23\"?

```{r}
sd_may23 <- filter(vax, county == 'San Diego' &
                     as_of_date == '2023-05-23')
```

```{r}
hist(sd_may23$percent_of_population_fully_vaccinated,
     xlab = 'Percent of Population Fully Vaccinated in a Zip Code Area',
     main = 'Histogram of Vaccination Rates Across \nSan Diego County - May 23, 2023',
     ylab = 'Count(Zip code areas)')
```

ggplot2 option

```{r}
library(ggplot2)
ggplot(sd_may23) +
  aes(percent_of_population_fully_vaccinated) +
  geom_histogram(bins = 12) +
  ggtitle('Histogram of Vaccination Rates Across \nSan Diego County - May 23, 2023') +
  labs(title = 'Histogram of Vaccination Rates Across San Diego County',
       subtitle = 'As of 2023-05-23',
       x = 'Percent of Population Fully Vaccinated in a Zip Code Area',
       y = 'Count(Zip code areas)')
```

# Focus on UCSD/La Jolla

UC San Diego resides in the 92037 ZIP code area and is listed with an age 5+ population size of 36,144.

```{r}
ucsd <- filter(sd, zip_code_tabulation_area=="92037")
ucsd[1,]$age5_plus_population
```

> **Q15**. Using **`ggplot`** make a graph of the vaccination rate time course for the 92037 ZIP code area:

```{r}
p <- ggplot(ucsd) +
  aes(as_of_date,
      percent_of_population_fully_vaccinated) +
  geom_point() +
  geom_line(group=1) +
  ylim(c(0,1)) +
  labs(x='Date', y="Percent Vaccinated")
```

# Comparing to similar sized areas

Let\'s return to the full dataset and look across every zip code area with a population at least as large as that of 92037 on *as_of_date* \"2023-05-23\".

```{r}
# Subset to all CA areas with a population as large as 92037
vax.36 <- filter(vax, age5_plus_population > 36144 &
                as_of_date == "2023-05-23")
```

> **Q16**. Calculate the mean *\"Percent of Population Fully Vaccinated\"* for ZIP code areas with a population as large as 92037 (La Jolla) *as_of_date* \"2023-05-23\". Add this as a straight horizontal line to your plot from above with the `geom_hline()` function?

```{r}
mean_percent_pop_fully_vaccinated <- mean(vax.36$percent_of_population_fully_vaccinated)
```

```{r}
p + geom_hline(yintercept = mean_percent_pop_fully_vaccinated,
               linetype = 'dashed',
               color = 'red')
```

> **Q17.** What is the 6 number summary (Min, 1st Qu., Median, Mean, 3rd Qu., and Max) of the *\"Percent of Population Fully Vaccinated\"* values for ZIP code areas with a population as large as 92037 (La Jolla) *as_of_date* \"2023-05-23\"?

```{r}
summary(vax.36$percent_of_population_fully_vaccinated)
```

> **Q18.** Using ggplot generate a histogram of this data.

```{r}
ggplot(vax.36) +
  aes(percent_of_population_fully_vaccinated) +
  xlim(c(0,1)) +
  geom_histogram() +
  labs(x = 'Percent Vaccinated',
       y = 'Count')
```

> **Q19**. Is the 92109 and 92040 ZIP code areas above or below the average value you calculated for all these above?

```{r}
vax %>% filter(as_of_date == "2023-05-23") %>%  
  filter(zip_code_tabulation_area=="92040") %>%
  select(percent_of_population_fully_vaccinated)
```

```{r}
vax %>% filter(as_of_date == "2023-05-23") %>%  
  filter(zip_code_tabulation_area=="92109") %>%
  select(percent_of_population_fully_vaccinated)
```

It is above.

> **Q20.** Finally make a time course plot of vaccination progress for all areas in the full dataset with a `age5_plus_population > 36144`.

```{r}
vax.36.all <- filter(vax, age5_plus_population > 36144)


ggplot(vax.36.all) +
  aes(x = ymd(as_of_date),
      y = percent_of_population_fully_vaccinated, 
      group=zip_code_tabulation_area) +
  geom_line(alpha=0.2, color='green') +
  ylim(c(0,1)) +
  labs(x='Date', y='Percent Vaccinated',
       title='Vaccination rate across California',
       subtitle='Only areas with a population above 36k are shown') +
  geom_hline(yintercept = mean_percent_pop_fully_vaccinated, linetype='dashed')
```
